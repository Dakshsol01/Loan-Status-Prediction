# -*- coding: utf-8 -*-
"""Loan_Status_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10lMMF2ciWqcyyNIJl7n2qa-9Cipz-tz9

importing the Dependencies
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

# loading the dataset in panda
loan_dataset = pd.read_csv('/content/train_u6lujuX_CVtuZ9i (1).csv')

type(loan_dataset)

# Printing the first 5 dataframe
loan_dataset.head()

# Counting the number of rows and columns:
loan_dataset.shape

# Calculating the statistics:
loan_dataset.describe()

# Number of missing values in each column
loan_dataset.isnull().sum()

# Dropping the missing values:
loan_dataset = loan_dataset.dropna()

loan_dataset.isnull().sum()

# replacing the last column values for encoding:
loan_dataset.replace({"Loan_Status":{'N':0,'Y':1}}, inplace = True)

# We're rechecking the first 5 dataframe here:
loan_dataset.head()

# Depending Column Count
loan_dataset['Dependents'].value_counts()

# Replacing the value of 3+ to 4
loan_dataset = loan_dataset.replace(to_replace='3+', value=4)

# Rechecking the dataset:
loan_dataset.head()

# Dependent values:
  loan_dataset['Dependents'].value_counts()

"""Data Visualization"""

# Education and Loan_Status
sns.countplot(x='Education', hue='Loan_Status', data=loan_dataset)

# Marital Status
sns.countplot(x='Married', hue='Loan_Status', data=loan_dataset)

#  Converting categorical columns into numerical values:
loan_dataset.replace({"Married": {'No':0, 'Yes':1}}, inplace = True)

# rechecking the datset
loan_dataset.head()

#  Converting Gender into numercal value:
loan_dataset.replace({"Gender": {'Male':1, 'Female':0}}, inplace = True)

loan_dataset.head()

loan_dataset.replace({"Property_Area": {'Rural':0, 'Semiurban':1, 'Urban': 2}}, inplace = True)

loan_dataset.head()

loan_dataset.replace({"Education": {'Not Graduate':0, 'Graduate':1}}, inplace = True)

loan_dataset.replace({"Self_Employed": {'No':0, 'Yes':1}}, inplace = True)

loan_dataset.head()

# Separating the data and label:
X = loan_dataset.drop(columns=["Loan_ID", "Loan_Status"], axis = 1)
Y = loan_dataset['Loan_Status']

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, stratify=Y, random_state = 2)

# Checking the shape of X:
print(X.shape, X_train.shape, X_test.shape)

"""Training the Model:

Support Vector Machine Model
"""

classifier = svm.SVC(kernel= 'linear')

# Training the SVM Model
classifier.fit(X_train, Y_train)

"""Model Evaluation"""

# Checking the Accuracy score on training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Accuracy on Training data: ", training_data_accuracy)

#  Checking the Accuracy score on Testing data
X_test_prediction = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("Accuracy on Testing data: ", testing_data_accuracy)



"""# New Section"""